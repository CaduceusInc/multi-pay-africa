# Generated by Django 4.0.3 on 2022-04-05 23:05

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('customer', models.EmailField(max_length=225, unique=True)),
                ('phone', models.CharField(max_length=20, unique=True)),
                ('amount', models.IntegerField(help_text='\n            Amount ( in kobo if currency is NGN, pesewas,\n            if currency is GHS, and cents, if currency is ZAR ) to be refunded  to the customer.\n            Amount is optional(defaults to original transaction amount) and cannot be more than the original transaction amount\n            ', verbose_name='amount')),
                ('description', models.TextField(help_text='A description for this subaccount', verbose_name='description')),
                ('due_date', models.DateTimeField(auto_now=True, help_text='ISO 8601 representation of request due date', verbose_name='Due Date')),
                ('tax', models.CharField(help_text='Array of taxes to be charged in the format [{"name":"VAT", "amount":2000}]', max_length=50, verbose_name='Tax')),
                ('currency', models.CharField(choices=[('NGN', 'NGN'), ('ZAR', 'ZAR'), ('GHS', 'GHS'), ('USD', 'USD')], default='NGN', help_text='Three-letter ISO currency. Allowed values are: NGN, GHS, ZAR or USD', max_length=3, verbose_name='Currency')),
                ('send_notification', models.BooleanField(default=True, help_text='Indicates whether Paystack sends an email notification to customer. Defaults to true', verbose_name='Send notification')),
                ('draft', models.BooleanField(default=False, help_text='Indicate if request should be saved as draft. Defaults to false and overrides send_notification', verbose_name='Draft')),
                ('has_invoice', models.BooleanField(default=False, help_text='Set to true to create a draft invoice (adds an auto incrementing invoice number if none is provided) even if there are no line_items or tax passed', verbose_name='Has Invoice')),
                ('invoice_number', models.IntegerField(default=1, help_text='Numeric value of invoice. Invoice will start from 1 and auto increment from there. This field is to help override whatever value Paystack decides. Auto increment for subsequent invoices continue from this point.', verbose_name='Invoice Number')),
                ('split_code', models.CharField(help_text='The split code of the transaction split. e.g. SPL_98WF13Eb3w', max_length=100, verbose_name='Split Code')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR', max_length=200, verbose_name='Plan name')),
                ('interval', models.CharField(help_text='Interval in words. Valid intervals are: daily, weekly, monthly,biannually, annually', max_length=50, verbose_name='Interval')),
                ('description', models.TextField(help_text='A description for this plan', verbose_name='Description')),
                ('send_invoices', models.BooleanField(default=False, help_text="Set to false if you don't want invoices to be sent to your customers", verbose_name='Send invoice to User')),
                ('send_sms', models.BooleanField(default=False, help_text="Set to false if you don't want text messages to be sent to your customers", verbose_name='Send SMS')),
                ('currency', models.CharField(choices=[('NGN', 'NGN'), ('ZAR', 'ZAR'), ('GHS', 'GHS'), ('USD', 'USD')], help_text='Currency in which amount is set. Allowed values are NGN, GHS, ZAR or USD', max_length=50, verbose_name='Currency')),
                ('invoice_limit', models.IntegerField(default=1, help_text='Number of invoices to raise during subscription to this plan. Can be overridden by specifying an invoice_limit while subscribing.', verbose_name='Invoice Limit')),
            ],
            options={
                'verbose_name': 'Plan',
                'verbose_name_plural': 'Plans',
            },
        ),
        migrations.CreateModel(
            name='Subaccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('business_name', models.CharField(help_text='Name of business for subaccount', max_length=255, verbose_name='Business Name')),
                ('settlement_bank', models.CharField(help_text='Bank Code for the bank. You can get the list of Bank Codes by calling the List Banks endpoint', max_length=50, verbose_name='settlement_bank')),
                ('account_number', models.IntegerField(help_text='Bank Account Number', verbose_name='Account number')),
                ('percentage_charge', models.FloatField(help_text='The default percentage charged when receiving on behalf of this subaccount', verbose_name='Percentage charge')),
                ('description', models.TextField(help_text='A description for this subaccount', verbose_name='description')),
                ('primary_contact_email', models.EmailField(help_text='A contact email for the subaccount', max_length=254, verbose_name='Primary Contact Email')),
                ('primary_contact_phone', models.CharField(help_text='A phone number to call for this subaccount', max_length=20, verbose_name='primary_contact_phone')),
                ('metadata', models.JSONField(blank=True, help_text='Stringified JSON object. Add a custom_fields attribute which has an array of objects if you would like the fields to be added to your transaction when displayed on the dashboard', null=True, verbose_name='metadata')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VirtualAccounts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('customer', models.EmailField(max_length=225, unique=True)),
                ('phone', models.CharField(max_length=20, unique=True)),
                ('account_name', models.CharField(help_text='Name of the account', max_length=100, verbose_name='Account Name')),
                ('assigned', models.BooleanField(default=False, help_text='Whether the account is assigned to a user', verbose_name='Assigned')),
                ('account_number', models.CharField(help_text='Account number of the virtual account', max_length=50, verbose_name='Account Number')),
                ('currency', models.CharField(help_text='Currency of the virtual account', max_length=50, verbose_name='Currency')),
                ('balance', models.IntegerField(help_text='Balance of the virtual account', verbose_name='Balance')),
                ('active', models.BooleanField(help_text='Whether the account is active', verbose_name='Active')),
                ('customer_id', models.CharField(help_text='Customer ID of the virtual account', max_length=255, verbose_name='Customer ID')),
                ('assignee_id', models.CharField(help_text='Assignee ID of the virtual account', max_length=100, verbose_name='Assignee ID')),
                ('account_type', models.CharField(help_text='Account type of the virtual account', max_length=100, verbose_name='Account Type')),
                ('assigned_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Virtual Account',
                'verbose_name_plural': 'Virtual Accounts',
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('customer', models.EmailField(max_length=225, unique=True)),
                ('phone', models.CharField(max_length=20, unique=True)),
                ('wallet_id', models.CharField(help_text='A unique identifier for the Wallet of a particular customer', max_length=50, verbose_name='Wallet Id')),
                ('balance', models.IntegerField(default=0, help_text='Balance of a customer wallet', verbose_name='Wallet Balance')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('amount', models.IntegerField(help_text='Amount of transaction. If NGN, unit is kobo; if GHS, unit is pesewas', verbose_name='Amount')),
                ('email', models.EmailField(max_length=254, verbose_name='Customer Email')),
                ('currency', models.CharField(choices=[('NGN', 'NGN'), ('ZAR', 'ZAR'), ('GHS', 'GHS'), ('USD', 'USD')], default='NGN', help_text='Currency of transaction', max_length=4, verbose_name='Currency')),
                ('reference', models.CharField(help_text='Reference of transaction', max_length=100, verbose_name='Reference')),
                ('callback_url', models.URLField(verbose_name='Callback URL')),
                ('invoice_limit', models.IntegerField(blank=True, default=1, help_text='Invoice limit of transaction. Number of times to charge customer during subscription to plan', null=True, verbose_name='Invoice Limit')),
                ('metadata', models.JSONField(blank=True, help_text='Metadata of the transaction. JSON converted to string', null=True, verbose_name='Metadata')),
                ('channels', models.CharField(blank=True, help_text="Channels to be used for transaction. They include ['card', 'bank', 'ussd', 'qr', 'mobile_money', 'bank_transfer']", max_length=100, null=True, verbose_name='Channels')),
                ('split_code', models.CharField(help_text='The split code of the transaction split. e.g. SPL_98WF13Eb3w', max_length=100, verbose_name='Split Code')),
                ('subaccount', models.CharField(help_text='The code for the subaccount that owns the payment. e.g. ACCT_8f4s1eq7ml6rlzj', max_length=100, verbose_name='Subaccount')),
                ('transaction_charge', models.IntegerField(help_text='Transaction charge of the transaction', verbose_name='Transaction Charge')),
                ('bearer', models.CharField(choices=[('ACCOUNT', 'ACCOUNT'), ('SUBACCOUNT', 'SUBACCOUNT')], help_text="Bearer of the transaction. can either be 'subaccount' or 'account'", max_length=50, verbose_name='Bearer')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='paystack.plan')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('customer', models.EmailField(max_length=225, unique=True)),
                ('phone', models.CharField(max_length=20, unique=True)),
                ('authorization', models.JSONField(blank=True, help_text='Authorization of the transaction', null=True, verbose_name='Authorization')),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='paystack.plan')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('amount', models.IntegerField(help_text='\n            Amount ( in kobo if currency is NGN, pesewas,\n            if currency is GHS, and cents, if currency is ZAR ) to be refunded  to the customer.\n            Amount is optional(defaults to original transaction amount) and cannot be more than the original transaction amount\n            ', verbose_name='amount')),
                ('currency', models.CharField(choices=[('NGN', 'NGN'), ('ZAR', 'ZAR'), ('GHS', 'GHS'), ('USD', 'USD')], help_text='Three-letter ISO currency. Allowed values are: NGN, GHS, ZAR or USD', max_length=3, verbose_name='Currency')),
                ('customer_note', models.TextField(help_text='Customer reason', verbose_name='Customer Note')),
                ('merchant_note', models.TextField(help_text='Merchant reason', verbose_name='Merchant Note')),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='paystack.transaction')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
